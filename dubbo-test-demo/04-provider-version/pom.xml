<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>dubbo-test-demo</artifactId>
        <groupId>com.wyx</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>04-provider-version</artifactId>
    <description>
        多版本控制-服务提供者
            当系统进行升级时，一般都是采用“灰度发布(又称为金丝雀发布)”过程。即在低压 力时段，
            让部分消费者先调用新的提供者实现类，其余的仍然调用老的实现类，
            在新的实现 类运行没有问题的情况下，逐步让所有消费者全部调用成新的实现类。
            多版本控制就是实现 灰度发布的。

        多协议支持
            除了 Dubbo 服务暴露协议 Dubbo 协议外，Dubbo 框架还支持另外 8 种服务暴露协议:
            RMI 协议、Hessian 协议、HTTP 协议、WebService 协议、Thrift 协议、Memcached 协议、Redis协议、Rest 协议。但在实际生产中，
            使用最多的就是 Dubbo 服务暴露协议。
        各个协议的特点
            小数据大并发使用 Dubbo，大数据小并发使用其它。

        (1) dubbo 协议
         Dubbo默认传输协议
         连接个数:单连接
         连接方式:长连接
         传输协议:TCP
         传输方式:NIO 异步传输
         适用范围:传入传出参数数据包较小(建议小于100K)，消费者比提供者个数多，单一
        消费者无法压满提供者，尽量不要用 dubbo 协议传输大文件或超大字符串。 (2) rmi 协议
         采用 JDK 标准的java.rmi.*实现  连接个数:多连接
         连接方式:短连接
         传输协议:TCP
         传输方式:BIO同步传输
         适用范围:传入传出参数数据包大小混合，消费者与提供者个数差不多，可传文件。
        (3) hession 协议
         连接个数:多连接
         连接方式:短连接
         传输协议:HTTP
         传输方式:BIO同步传输
         适用范围:传入传出参数数据包较大，提供者比消费者个数多，提供者抗压能力较大，
        可传文件
        (4) http 协议
         连接个数:多连接  连接方式:短连接  传输协议:HTTP
         传输方式:BIO同步传输
         适用范围:传入传出参数数据包大小混合，提供者比消费者个数多，可用浏览器查看，
        可用表单或 URL 传入参数，暂不支持传文件。 (5) webService 协议
         连接个数:多连接
         连接方式:短连接
         传输协议:HTTP
         传输方式:BIO同步传输
         适用场景:系统集成，跨语言调用
        (6) thrift 协议
        Thrift 是 Facebook 捐给 Apache 的一个 RPC 框架，其消息传递采用的协议即为 thrift 协议。当前 dubbo 支持的 thrift 协议是对 thrift 原生协议的扩展。Thrift 协议不支持 null 值的传递。
        (7) memcached 协议与 redis 协议
        它们都是高效的 KV 缓存服务器。它们会对传输的数据使用相应的技术进行缓存。
        (8) rest 协议
        若需要开发具有 RESTful 风格的服务，则需要使用该协议。
    </description>

    <dependencies>
        <!--业务接口工程依赖-->
        <dependency>
            <groupId>com.wyx</groupId>
            <artifactId>00-api</artifactId>
        </dependency>
        <!-- dubbo依赖 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
        </dependency>
        <!-- zk-client依赖 -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
        </dependency>
        <!-- Spring依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <!-- commons-logging依赖 -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
    </dependencies>

</project>