<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>wyx-dubbo-demo</artifactId>
        <groupId>com.wyx</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <artifactId>dubbo-test-demo</artifactId>
    <packaging>pom</packaging>
    <description>
        01-直连式注册中心-demo
        02-ZK注册中心-demo
        02-zk02/02-zk03:负载均衡
            若消费者与提供者均设置了负载均衡策略，消费者端设置的优先级高。
            若消费者端没有显式的设置，但提供者端显式的设置了，且同一个服务(接口名、版本 号、分组都相同)的负载均衡策略相同。消费者调用时会按照提供者设置的策略调用。
            若多个提供者端设置的不相同，则最后一个注册的会将前面注册的信息覆盖。
            Dubbo 内置的负载均衡算法
                Dubbo 内置了四种负载均衡算法。 A、 random
                随机算法，是 Dubbo 默认的负载均衡算法。存在服务堆积问题。 B、 roundrobin
                轮询算法。按照设定好的权重依次进行调度。
                C、 leastactive 最少活跃度调度算法。即被调度的次数越少，其优选级就越高，被调度到的机率就越高。
                D、 consistenthash
                一致性 hash 算法。对于相同参数的请求，其会被路由到相同的提供者。
        04-多版本控制-demo
        05-服务分组-demo
    </description>

    <modules>
        <module>00-api</module>

<!--        <module>01-consumer</module>-->
<!--        <module>01-provider</module>-->

        <module>02-consumer-zk</module>
        <module>02-provider-zk</module>
        <module>02-provider-zk02</module>
        <module>02-provider-zk03</module>

<!--        <module>04-consumer-version</module>-->
<!--        <module>04-provider-version</module>-->

<!--        <module>05-consumer-group</module>-->
<!--        <module>05-provider-group</module>-->

<!--        <module>05-consumer-group</module>-->
<!--        <module>05-provider-group</module>-->
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <!-- 自定义版本号 -->
        <spring-version>4.3.16.RELEASE</spring-version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <!--业务接口工程依赖-->
            <dependency>
                <groupId>com.wyx</groupId>
                <artifactId>00-api</artifactId>
                <version>1.0-SNAPSHOT</version>
            </dependency>
            <!-- dubbo依赖 -->
            <dependency>
                <groupId>org.apache.dubbo</groupId>
                <artifactId>dubbo</artifactId>
                <version>2.7.8</version>
            </dependency>
            <!-- zk-client依赖 -->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>5.1.0</version>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>5.1.0</version>
            </dependency>
            <!-- Spring依赖 -->
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-beans</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-core</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-context</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-expression</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aspects</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-tx</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-jdbc</artifactId>
                <version>${spring-version}</version>
            </dependency>
            <!-- commons-logging依赖 -->
            <dependency>
                <groupId>commons-logging</groupId>
                <artifactId>commons-logging</artifactId>
                <version>1.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>