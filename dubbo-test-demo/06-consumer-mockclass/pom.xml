<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>dubbo-test-demo</artifactId>
        <groupId>com.wyx</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>06-consumer-mockclass</artifactId>
    <description>
        mock-class-消费者
        服务降级
            解决高并发的三把利器:降级、限流、缓存。
        什么是服务降级
            服务降级，当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务有策略的 降低服务级别，以释放服务器资源，保证核心任务的正常运行。
        服务降级方式
            能够实现服务降级方式很多，常见的有如下几种情况:
             部分服务暂停 例：淘宝双11不能申请退货
             全部服务暂停 例：12306晚上11点到第二天早上7点不提供服务
             随机拒绝服务 例：12306支付时，可能出现支付失败，请重新支付
             部分服务延迟 例：消息消费处理

        Dubbo的服务降级采用的是mock机制。其具有两种降级处理方式:Mock Null降级处理，
            与 Mock Class 降级处理。

    </description>

    <dependencies>
        <!-- dubbo依赖 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
        </dependency>
        <!-- zk-client依赖 -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
        </dependency>
        <!-- Spring依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <!-- commons-logging依赖 -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
    </dependencies>
</project>