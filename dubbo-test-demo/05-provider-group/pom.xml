<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>dubbo-test-demo</artifactId>
        <groupId>com.wyx</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <artifactId>05-provider-group</artifactId>
    <description>
        服务分组-服务提供者
            服务分组与多版本控制的使用方式几乎是相同的，只要将 version 替换为 group 即可。
            但使用目的不同。使用版本控制的目的是为了升级，将原有老版本替换掉，将来不再提供老 版本的服务，
            所以不同版本间不能出现相互调用。而分组的目的则不同，其也是针对相同接 口，给出了多种实现类。
            但不同的是，这些不同实现并没有谁替换掉谁的意思，是针对不同 需求，或针对不同功能模块所给出的不同实现。
            这些实现所提供的服务是并存的，所以它们 间可以出现相互调用关系。
            例如，对于支付服务的实现，可以有微信支付实现与支付宝支付 实现等。
    </description>

    <dependencies>
        <!--业务接口工程依赖-->
        <dependency>
            <groupId>com.wyx</groupId>
            <artifactId>00-api</artifactId>
        </dependency>
        <!-- dubbo依赖 -->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
        </dependency>
        <!-- zk-client依赖 -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
        </dependency>
        <!-- Spring依赖 -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-expression</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aspects</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <!-- commons-logging依赖 -->
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>
    </dependencies>

</project>