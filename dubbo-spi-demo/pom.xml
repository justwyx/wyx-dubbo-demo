<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.3.0.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.wyx</groupId>
	<artifactId>dubbo-spi-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>dubbo-spi-demo</name>
	<description>
		Dubbo 的 SPI 规范是:
		 接口名:可以随意定义
		 实现类名:在接口名前添加一个用于表示自身功能的“标识前辍”字符串
		 提供者配置文件路径:在依次查找的目录为
		META-INF/dubbo/internal
		META-INF/dubbo
		META-INF/services
		 提供者配置文件名称:接口的全限定性类名，无需扩展名
		 提供者配置文件内容:文件的内容为 key=value 形式，value 为该接口的实现类的全限类性类名，key 可以随意，但一般为该实现类的“标识前辍”(首字母小写)。一个类名占一行。
		 提供者加载:ExtensionLoader 类相当于 JDK SPI 中的 ServiceLoader 类，用于加载提供者
		配置文件中所有的实现类，并创建相应的实例。
	</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.dubbo/dubbo -->
		<dependency>
			<groupId>org.apache.dubbo</groupId>
			<artifactId>dubbo</artifactId>
			<version>2.7.8</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
